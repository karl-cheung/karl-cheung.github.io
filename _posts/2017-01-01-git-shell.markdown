---
layout: post
title: 'git 命令行'
date: 2017-01-01
categories: jekyll update
---

## 配置

```shell

git config --global user.name 'name'

git config --global user.email 'mailbox@*’
```

## 提交

```shell

# 初次提交

git init

git add .

git commit -m 'commit message'

git remote add origin *@*.git

git push -u origin master

# 远程分支合并提交

git init

git add .

git commit -m 'commit message'

git remote add origin *@*.git

git pull origin master --allow-unrelated-histories

git push -u origin master

# 当前分支提交

git init

git add .

git commit -m 'commit message'

git push origin <branch>

# 保留当前代码删除所有提交历史

git checkout --orphan latest_branch

git add -A

git commit -am 'commit message'

git branch -D master

git branch -m master

git push -f origin master

# 强制提交

git push origin <branch> --force
```

## remote

```shell
# 查看 remote
git remote -v

# 添加 remote
git remote add <origin> *.git

# 删除 remote
git remote remove <origin>

# 重命名 remote
git remote rename <old-origin> <new-origin>

# 指定 remote 提交
git push <origin>

# 查看其他 remote 提交日志
git ls-remote

# 更改远程仓库（新的 remote）
git remote set-url origin *@*.git

# 推送更改后的远程仓库并设置为默认跟踪分支
git push -u origin master

# 推送并设置跟踪分支
git push -u origin <branch>
```

## 更换远程仓库
```shell
# 更改远程仓库地址
git remote set-url origin <new-url>

# 获取远程仓库的所有分支
git fetch origin

# 遍历所有本地分支并设置它们以跟踪相应的远程分支
git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
```

### tag

```shell
# 查看本地
git tag

# 查看远程
git ls-remote --tags

# 新建
git tag <tag>

# 推送远程
git push origin <tag>

# 删除本地
git tag -d <tag>

# 删除远程
git push origin :refs/tags/<tag>
```

### 推送 pr

```shell
git remote add upstream https://*@*.git

git remote -v

git fetch upstream

git merge upstream/<branch>

git push origin <branch>
```

## 其他

```shell

# 丢弃本地全部变更
git reset --hard HEAD^

# 丢弃本地全部变更并与远程分支保持同步
git reset --hard origin/<branch>

# 取消工作区更改
git checkout file

# 取消暂存区更改（add 操作）
git reset HEAD file

# 查看上一次未 push 的 commit
git log <branch> ^origin/<branch>

# 撤销上一次未 push 的 commit
git reset HEAD~1

# 回退到某一次未 push 的 commit
git reset commit_id

# 修正最后一个 commit 消息
git commit --amend -m 'commit message'

# 拉取远程分支并新建本地分支
git fetch <branch>:<branch>

# 拉取远程分支并在本地新建后转变到本地分支
git checkout -b <branch> origin/<branch>

# 删除远程分支文件
git rm -rf file

# 删除远程分支文件但本地继续保存
git rm --cached file

# 本地分支关联到远程分支
git branch --set-upstream-to=origin/<branch> <branch>

# 重命名本地分支
git branch -m <oldDranch> <newBranch>

# 删除远程分支
git push origin -d <branch>

# 多个分支推送
git push --all origin
```
